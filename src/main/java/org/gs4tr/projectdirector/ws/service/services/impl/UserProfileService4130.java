package org.gs4tr.projectdirector.ws.service.services.impl;

import java.net.URL;

import javax.xml.namespace.QName;
import javax.xml.ws.Service;
import javax.xml.ws.WebEndpoint;
import javax.xml.ws.WebServiceClient;
import javax.xml.ws.WebServiceFeature;

/**
 * This class was generated by Apache CXF 2.4.2
 * 2016-05-24T18:53:11.377+03:00
 * Generated source version: 2.4.2
 * 
 */
@WebServiceClient(name = "UserProfileService_4130", 
                  targetNamespace = "http://impl.services.service.ws.projectdirector.gs4tr.org") 
public class UserProfileService4130 extends Service {

    public final static URL WSDL_LOCATION;

    public final static QName SERVICE = new QName("http://impl.services.service.ws.projectdirector.gs4tr.org", "UserProfileService_4130");
    public final static QName UserProfileServiceHttpEndpoint = new QName("http://impl.services.service.ws.projectdirector.gs4tr.org", "UserProfileServiceHttpEndpoint");
    public final static QName UserProfileServiceHttpSoap11Endpoint = new QName("http://impl.services.service.ws.projectdirector.gs4tr.org", "UserProfileServiceHttpSoap11Endpoint");
    public final static QName UserProfileServiceHttpSoap12Endpoint = new QName("http://impl.services.service.ws.projectdirector.gs4tr.org", "UserProfileServiceHttpSoap12Endpoint");
    static {
        WSDL_LOCATION = null;
    }

    public UserProfileService4130(URL wsdlLocation) {
        super(wsdlLocation, SERVICE);
    }

    public UserProfileService4130(URL wsdlLocation, QName serviceName) {
        super(wsdlLocation, serviceName);
    }

    public UserProfileService4130() {
        super(WSDL_LOCATION, SERVICE);
    }
    
    //This constructor requires JAX-WS API 2.2. You will need to endorse the 2.2
    //API jar or re-run wsdl2java with "-frontend jaxws21" to generate JAX-WS 2.1
    //compliant code instead.
    public UserProfileService4130(WebServiceFeature ... features) {
        super(WSDL_LOCATION, SERVICE, features);
    }

    //This constructor requires JAX-WS API 2.2. You will need to endorse the 2.2
    //API jar or re-run wsdl2java with "-frontend jaxws21" to generate JAX-WS 2.1
    //compliant code instead.
    public UserProfileService4130(URL wsdlLocation, WebServiceFeature ... features) {
        super(wsdlLocation, SERVICE, features);
    }

    //This constructor requires JAX-WS API 2.2. You will need to endorse the 2.2
    //API jar or re-run wsdl2java with "-frontend jaxws21" to generate JAX-WS 2.1
    //compliant code instead.
    public UserProfileService4130(URL wsdlLocation, QName serviceName, WebServiceFeature ... features) {
        super(wsdlLocation, serviceName, features);
    }

    /**
     *
     * @return
     *     returns UserProfileServicePortType
     */
    @WebEndpoint(name = "UserProfileServiceHttpEndpoint")
    public UserProfileServicePortType getUserProfileServiceHttpEndpoint() {
        return super.getPort(UserProfileServiceHttpEndpoint, UserProfileServicePortType.class);
    }

    /**
     * 
     * @param features
     *     A list of {@link javax.xml.ws.WebServiceFeature} to configure on the proxy.  Supported features not in the <code>features</code> parameter will have their default values.
     * @return
     *     returns UserProfileServicePortType
     */
    @WebEndpoint(name = "UserProfileServiceHttpEndpoint")
    public UserProfileServicePortType getUserProfileServiceHttpEndpoint(WebServiceFeature... features) {
        return super.getPort(UserProfileServiceHttpEndpoint, UserProfileServicePortType.class, features);
    }
    /**
     *
     * @return
     *     returns UserProfileServicePortType
     */
    @WebEndpoint(name = "UserProfileServiceHttpSoap11Endpoint")
    public UserProfileServicePortType getUserProfileServiceHttpSoap11Endpoint() {
        return super.getPort(UserProfileServiceHttpSoap11Endpoint, UserProfileServicePortType.class);
    }

    /**
     * 
     * @param features
     *     A list of {@link javax.xml.ws.WebServiceFeature} to configure on the proxy.  Supported features not in the <code>features</code> parameter will have their default values.
     * @return
     *     returns UserProfileServicePortType
     */
    @WebEndpoint(name = "UserProfileServiceHttpSoap11Endpoint")
    public UserProfileServicePortType getUserProfileServiceHttpSoap11Endpoint(WebServiceFeature... features) {
        return super.getPort(UserProfileServiceHttpSoap11Endpoint, UserProfileServicePortType.class, features);
    }
    /**
     *
     * @return
     *     returns UserProfileServicePortType
     */
    @WebEndpoint(name = "UserProfileServiceHttpSoap12Endpoint")
    public UserProfileServicePortType getUserProfileServiceHttpSoap12Endpoint() {
        return super.getPort(UserProfileServiceHttpSoap12Endpoint, UserProfileServicePortType.class);
    }

    /**
     * 
     * @param features
     *     A list of {@link javax.xml.ws.WebServiceFeature} to configure on the proxy.  Supported features not in the <code>features</code> parameter will have their default values.
     * @return
     *     returns UserProfileServicePortType
     */
    @WebEndpoint(name = "UserProfileServiceHttpSoap12Endpoint")
    public UserProfileServicePortType getUserProfileServiceHttpSoap12Endpoint(WebServiceFeature... features) {
        return super.getPort(UserProfileServiceHttpSoap12Endpoint, UserProfileServicePortType.class, features);
    }

}
